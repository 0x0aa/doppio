// Generated by CoffeeScript 1.6.2
(function() {
  "use strict";
  var CustomClassLoader, debug, error, log, root, trace, util, vtrace, _, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('../vendor/_.js');

  util = require('./util');

  _ref = require('./logging'), log = _ref.log, debug = _ref.debug, error = _ref.error, trace = _ref.trace, vtrace = _ref.vtrace;

  CustomClassLoader = void 0;

  root = typeof exports !== "undefined" && exports !== null ? exports : (_ref1 = window.java_object) != null ? _ref1 : window.java_object = {};

  root.JavaArray = (function() {
    function JavaArray(rs, cls, obj) {
      this.cls = cls;
      this.ref = rs.high_oref++;
      this.array = obj;
    }

    JavaArray.prototype.clone = function(rs) {
      return new root.JavaArray(rs, this.cls, _.clone(this.array));
    };

    JavaArray.prototype.get_field_from_offset = function(rs, offset) {
      return this.array[offset.toInt()];
    };

    JavaArray.prototype.set_field_from_offset = function(rs, offset, value) {
      return this.array[offset.toInt()] = value;
    };

    JavaArray.prototype.toString = function() {
      if (this.array.length <= 10) {
        return "<" + (this.cls.get_type()) + " [" + this.array + "] (*" + this.ref + ")>";
      } else {
        return "<" + (this.cls.get_type()) + " of length " + this.array.length + " (*" + this.ref + ")>";
      }
    };

    JavaArray.prototype.serialize = function(visited) {
      var f;

      if (this.ref in visited) {
        return "<*" + this.ref + ">";
      }
      visited[this.ref] = true;
      return {
        type: this.cls.get_type(),
        ref: this.ref,
        array: (function() {
          var _i, _len, _ref2, _ref3, _results;

          _ref2 = this.array;
          _results = [];
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            f = _ref2[_i];
            _results.push((_ref3 = f != null ? typeof f.serialize === "function" ? f.serialize(visited) : void 0 : void 0) != null ? _ref3 : f);
          }
          return _results;
        }).call(this)
      };
    };

    return JavaArray;

  })();

  root.JavaObject = (function() {
    function JavaObject(rs, cls, obj) {
      var field;

      this.cls = cls;
      if (obj == null) {
        obj = {};
      }
      this.ref = rs.high_oref++;
      this.fields = Object.create(this.cls.get_default_fields());
      for (field in obj) {
        if (obj.hasOwnProperty(field)) {
          this.fields[field] = obj[field];
        }
      }
      return;
    }

    JavaObject.prototype.clone = function(rs) {
      return new root.JavaObject(rs, this.cls, _.clone(this.fields));
    };

    JavaObject.prototype.set_field = function(rs, name, val) {
      if (this.fields[name] !== void 0) {
        this.fields[name] = val;
      } else {
        rs.java_throw(this.cls.loader.get_initialized_class('Ljava/lang/NoSuchFieldError;'), name);
      }
    };

    JavaObject.prototype.get_field = function(rs, name) {
      if (this.fields[name] !== void 0) {
        return this.fields[name];
      }
      return rs.java_throw(this.cls.loader.get_initialized_class('Ljava/lang/NoSuchFieldError;'), name);
    };

    JavaObject.prototype.get_field_from_offset = function(rs, offset) {
      var f;

      f = this._get_field_from_offset(rs, this.cls, offset.toInt());
      if (f.field.access_flags["static"]) {
        return f.cls_obj.static_get(rs, f.field.name);
      }
      return this.get_field(rs, f.cls + f.field.name);
    };

    JavaObject.prototype._get_field_from_offset = function(rs, cls, offset) {
      var classname, f, jco_ref;

      classname = cls.get_type();
      while (cls != null) {
        jco_ref = cls.get_class_object(rs).ref;
        f = cls.get_fields()[offset - jco_ref];
        if (f != null) {
          return {
            field: f,
            cls: cls.get_type(),
            cls_obj: cls
          };
        }
        cls = cls.get_super_class();
      }
      return rs.java_throw(this.cls.loader.get_initialized_class('Ljava/lang/NullPointerException;'), "field " + offset + " doesn't exist in class " + classname);
    };

    JavaObject.prototype.set_field_from_offset = function(rs, offset, value) {
      var f;

      f = this._get_field_from_offset(rs, this.cls, offset.toInt());
      if (f.field.access_flags["static"]) {
        return f.cls_obj.static_put(rs, f.field.name, value);
      } else {
        return this.set_field(rs, f.cls + f.field.name, value);
      }
    };

    JavaObject.prototype.toString = function() {
      if (this.cls.get_type() === 'Ljava/lang/String;') {
        return "<" + (this.cls.get_type()) + " '" + (this.jvm2js_str()) + "' (*" + this.ref + ")>";
      } else {
        return "<" + (this.cls.get_type()) + " (*" + this.ref + ")>";
      }
    };

    JavaObject.prototype.serialize = function(visited) {
      var fields, k, v, _ref2, _ref3;

      if (this.ref in visited) {
        return "<*" + this.ref + ">";
      }
      visited[this.ref] = true;
      fields = {};
      _ref2 = this.fields;
      for (k in _ref2) {
        v = _ref2[k];
        fields[k] = (_ref3 = v != null ? typeof v.serialize === "function" ? v.serialize(visited) : void 0 : void 0) != null ? _ref3 : v;
      }
      return {
        type: this.cls.get_type(),
        ref: this.ref,
        fields: fields
      };
    };

    JavaObject.prototype.jvm2js_str = function() {
      return util.chars2js_str(this.fields['Ljava/lang/String;value'], this.fields['Ljava/lang/String;offset'], this.fields['Ljava/lang/String;count']);
    };

    return JavaObject;

  })();

  root.JavaClassObject = (function(_super) {
    __extends(JavaClassObject, _super);

    function JavaClassObject(rs, $cls) {
      this.$cls = $cls;
      JavaClassObject.__super__.constructor.call(this, rs, rs.get_bs_cl().get_resolved_class('Ljava/lang/Class;'));
    }

    JavaClassObject.prototype.toString = function() {
      return "<Class " + (this.$cls.get_type()) + " (*" + this.ref + ")>";
    };

    return JavaClassObject;

  })(root.JavaObject);

  root.JavaClassLoaderObject = (function(_super) {
    __extends(JavaClassLoaderObject, _super);

    function JavaClassLoaderObject(rs, cls) {
      this.cls = cls;
      JavaClassLoaderObject.__super__.constructor.call(this, rs, this.cls);
      if (CustomClassLoader == null) {
        CustomClassLoader = require('./ClassLoader').CustomClassLoader;
      }
      this.$loader = new CustomClassLoader(rs.get_bs_cl(), this);
    }

    JavaClassLoaderObject.prototype.serialize = function(visited) {
      var cls, fields, k, loaded, type, v, _i, _len, _ref2, _ref3, _ref4;

      if (this.ref in visited) {
        return "<*" + this.ref + ">";
      }
      visited[this.ref] = true;
      fields = {};
      _ref2 = this.fields;
      for (k in _ref2) {
        v = _ref2[k];
        fields[k] = (_ref3 = v != null ? typeof v.serialize === "function" ? v.serialize(visited) : void 0 : void 0) != null ? _ref3 : v;
      }
      loaded = {};
      _ref4 = this.$loader.loaded_classes;
      for (cls = _i = 0, _len = _ref4.length; _i < _len; cls = ++_i) {
        type = _ref4[cls];
        loaded["" + type + "(" + (cls.getLoadState()) + ")"] = cls.loader.serialize(visited);
      }
      return {
        type: this.cls.get_type(),
        ref: this.ref,
        fields: fields,
        loaded: loaded
      };
    };

    return JavaClassLoaderObject;

  })(root.JavaObject);

  root.thread_name = function(rs, thread) {
    return util.chars2js_str(thread.get_field(rs, 'Ljava/lang/Thread;name'));
  };

}).call(this);
