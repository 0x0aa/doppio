// Generated by CoffeeScript 1.6.2
(function() {
  "use strict";
  var ClassData, ConstantPool, JavaClassObject, JavaObject, attributes, methods, opcodes, root, trace, util, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  util = require('./util');

  ConstantPool = require('./ConstantPool');

  attributes = require('./attributes');

  opcodes = require('./opcodes');

  methods = null;

  _ref = require('./java_object'), JavaObject = _ref.JavaObject, JavaClassObject = _ref.JavaClassObject;

  trace = require('./logging').trace;

  root = typeof exports !== "undefined" && exports !== null ? exports : this.ClassData = {};

  ClassData = (function() {
    function ClassData(loader) {
      this.loader = loader != null ? loader : null;
      this.access_flags = {};
      this.initialized = false;
      this.resolved = false;
      this.jco = null;
      this.reset_bit = 0;
    }

    ClassData.prototype.reset = function() {
      var iface, sc, _i, _len, _ref1;

      this.jco = null;
      this.reset_bit = 0;
      sc = this.get_super_class();
      if ((sc != null ? sc.reset_bit : void 0) === 1) {
        sc.reset();
      }
      _ref1 = this.get_interfaces;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        iface = _ref1[_i];
        if (iface.reset_bit === 1) {
          iface.reset();
        }
      }
    };

    ClassData.prototype.toExternalString = function() {
      return util.ext_classname(this.this_class);
    };

    ClassData.prototype.getLoadState = function() {
      if (this.initialized) {
        return 'initialized';
      } else if (this.resolved) {
        return 'resolved';
      } else {
        return 'loaded';
      }
    };

    ClassData.prototype.get_class_loader = function() {
      return this.loader;
    };

    ClassData.prototype.get_type = function() {
      return this.this_class;
    };

    ClassData.prototype.get_super_class_type = function() {
      return this.super_class;
    };

    ClassData.prototype.get_super_class = function() {
      return this.super_class_cdata;
    };

    ClassData.prototype.get_interface_types = function() {
      return [];
    };

    ClassData.prototype.get_interfaces = function() {
      return [];
    };

    ClassData.prototype.get_class_object = function(rs) {
      if (this.jco == null) {
        this.jco = new JavaClassObject(rs, this);
      }
      return this.jco;
    };

    ClassData.prototype.get_method = function() {
      return null;
    };

    ClassData.prototype.get_methods = function() {
      return {};
    };

    ClassData.prototype.get_fields = function() {
      return [];
    };

    ClassData.prototype.method_lookup = function(rs, sig) {
      return rs.java_throw(rs.get_bs_class('Ljava/lang/NoSuchMethodError;'), "No such method found in " + (util.ext_classname(this.get_type())) + "::" + sig);
    };

    ClassData.prototype.field_lookup = function(rs, name) {
      return rs.java_throw(rs.get_bs_class('Ljava/lang/NoSuchFieldError;'), "No such field found in " + (util.ext_classname(this.get_type())) + "::" + name);
    };

    ClassData.prototype.is_initialized = function() {
      var _ref1;

      if (this.initialized) {
        return true;
      }
      if (!this.is_resolved()) {
        return false;
      }
      if (this.get_method('<clinit>()V') != null) {
        return false;
      }
      this.initialized = ((_ref1 = this.get_super_class()) != null ? _ref1.is_initialized() : void 0) ? void 0 : false;
      return this.initialized;
    };

    ClassData.prototype.is_resolved = function() {
      return this.resolved;
    };

    ClassData.prototype.is_subinterface = function() {
      return false;
    };

    ClassData.prototype.is_subclass = function(target) {
      if (this === target) {
        return true;
      }
      if (this.get_super_class() == null) {
        return false;
      }
      return this.get_super_class().is_subclass(target);
    };

    return ClassData;

  })();

  root.PrimitiveClassData = (function(_super) {
    __extends(PrimitiveClassData, _super);

    function PrimitiveClassData(this_class, loader) {
      this.this_class = this_class;
      PrimitiveClassData.__super__.constructor.call(this, loader);
      this.initialized = true;
      this.resolved = true;
    }

    PrimitiveClassData.prototype.is_castable = function(target) {
      return this.this_class === target.this_class;
    };

    PrimitiveClassData.prototype.box_class_name = function() {
      switch (this.this_class) {
        case 'B':
          return 'Ljava/lang/Byte;';
        case 'C':
          return 'Ljava/lang/Character;';
        case 'D':
          return 'Ljava/lang/Double;';
        case 'F':
          return 'Ljava/lang/Float;';
        case 'I':
          return 'Ljava/lang/Integer;';
        case 'J':
          return 'Ljava/lang/Long;';
        case 'S':
          return 'Ljava/lang/Short;';
        case 'Z':
          return 'Ljava/lang/Boolean;';
        default:
          throw new Error("Tried to box a non-primitive class: " + this.this_class);
      }
    };

    PrimitiveClassData.prototype.create_wrapper_object = function(rs, value) {
      var box_name, wrapped;

      box_name = this.box_class_name();
      wrapped = new JavaObject(rs, rs.get_bs_class(box_name));
      wrapped.fields[box_name + 'value'] = value;
      return wrapped;
    };

    return PrimitiveClassData;

  })(ClassData);

  root.ArrayClassData = (function(_super) {
    __extends(ArrayClassData, _super);

    function ArrayClassData(component_type, loader) {
      this.component_type = component_type;
      ArrayClassData.__super__.constructor.call(this, loader);
      this.this_class = "[" + this.component_type;
      this.super_class = 'Ljava/lang/Object;';
    }

    ArrayClassData.prototype.reset = function() {
      var ccls;

      ArrayClassData.__super__.reset.call(this);
      ccls = this.get_component_class();
      if (ccls != null ? ccls.reset_bit : void 0) {
        ccls.reset();
      }
    };

    ArrayClassData.prototype.get_component_type = function() {
      return this.component_type;
    };

    ArrayClassData.prototype.get_component_class = function() {
      return this.component_class_cdata;
    };

    ArrayClassData.prototype.field_lookup = function(rs, name) {
      return this.super_class_cdata.field_lookup(rs, name);
    };

    ArrayClassData.prototype.method_lookup = function(rs, sig) {
      return this.super_class_cdata.method_lookup(rs, sig);
    };

    ArrayClassData.prototype.set_resolved = function(super_class_cdata, component_class_cdata) {
      this.super_class_cdata = super_class_cdata;
      this.component_class_cdata = component_class_cdata;
      this.resolved = true;
      return this.initialized = true;
    };

    ArrayClassData.prototype.is_castable = function(target) {
      var _ref1;

      if (!(target instanceof root.ArrayClassData)) {
        if (target instanceof root.PrimitiveClassData) {
          return false;
        }
        if (target.access_flags["interface"]) {
          return (_ref1 = target.get_type()) === 'Ljava/lang/Cloneable;' || _ref1 === 'Ljava/io/Serializable;';
        }
        return target.get_type() === 'Ljava/lang/Object;';
      }
      return this.get_component_class().is_castable(target.get_component_class());
    };

    return ArrayClassData;

  })(ClassData);

  root.ReferenceClassData = (function(_super) {
    __extends(ReferenceClassData, _super);

    function ReferenceClassData(bytes_array, loader) {
      var f, i, isize, m, mkey, num_fields, num_methods, super_ref, _i, _j, _len, _ref1, _ref2;

      if (methods == null) {
        methods = require('./methods');
      }
      ReferenceClassData.__super__.constructor.call(this, loader);
      bytes_array = new util.BytesArray(bytes_array);
      if ((bytes_array.get_uint(4)) !== 0xCAFEBABE) {
        throw "Magic number invalid";
      }
      this.minor_version = bytes_array.get_uint(2);
      this.major_version = bytes_array.get_uint(2);
      if (!((45 <= (_ref1 = this.major_version) && _ref1 <= 51))) {
        throw "Major version invalid";
      }
      this.constant_pool = new ConstantPool;
      this.constant_pool.parse(bytes_array);
      this.access_byte = bytes_array.get_uint(2);
      this.access_flags = util.parse_flags(this.access_byte);
      this.this_class = this.constant_pool.get(bytes_array.get_uint(2)).deref();
      super_ref = bytes_array.get_uint(2);
      if (super_ref !== 0) {
        this.super_class = this.constant_pool.get(super_ref).deref();
      }
      isize = bytes_array.get_uint(2);
      this.interfaces = (function() {
        var _i, _results;

        _results = [];
        for (i = _i = 0; _i < isize; i = _i += 1) {
          _results.push(this.constant_pool.get(bytes_array.get_uint(2)).deref());
        }
        return _results;
      }).call(this);
      num_fields = bytes_array.get_uint(2);
      this.fields = (function() {
        var _i, _results;

        _results = [];
        for (i = _i = 0; _i < num_fields; i = _i += 1) {
          _results.push(new methods.Field(this));
        }
        return _results;
      }).call(this);
      this.fl_cache = {};
      _ref2 = this.fields;
      for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
        f = _ref2[i];
        f.parse(bytes_array, this.constant_pool, i);
        this.fl_cache[f.name] = f;
      }
      num_methods = bytes_array.get_uint(2);
      this.methods = {};
      this.ml_cache = {};
      for (i = _j = 0; _j < num_methods; i = _j += 1) {
        m = new methods.Method(this);
        m.parse(bytes_array, this.constant_pool, i);
        mkey = m.name + m.raw_descriptor;
        this.methods[mkey] = m;
      }
      this.attrs = attributes.make_attributes(bytes_array, this.constant_pool);
      if (bytes_array.has_bytes()) {
        throw "Leftover bytes in classfile: " + bytes_array;
      }
      this.static_fields = Object.create(null);
    }

    ReferenceClassData.prototype.reset = function() {
      var method, _i, _len, _ref1, _results;

      ReferenceClassData.__super__.reset.call(this);
      this.initialized = false;
      this.static_fields = Object.create(null);
      _ref1 = this.methods;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        method = _ref1[_i];
        _results.push(method.initialize());
      }
      return _results;
    };

    ReferenceClassData.prototype.get_interfaces = function() {
      return this.interface_cdatas;
    };

    ReferenceClassData.prototype.get_interface_types = function() {
      return this.interfaces;
    };

    ReferenceClassData.prototype.get_fields = function() {
      return this.fields;
    };

    ReferenceClassData.prototype.get_method = function(sig) {
      return this.methods[sig];
    };

    ReferenceClassData.prototype.get_methods = function() {
      return this.methods;
    };

    ReferenceClassData.prototype.get_attribute = function(name) {
      var attr, _i, _len, _ref1;

      _ref1 = this.attrs;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        attr = _ref1[_i];
        if (attr.name === name) {
          return attr;
        }
      }
      return null;
    };

    ReferenceClassData.prototype.get_attributes = function(name) {
      var attr, _i, _len, _ref1, _results;

      _ref1 = this.attrs;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        attr = _ref1[_i];
        if (attr.name === name) {
          _results.push(attr);
        }
      }
      return _results;
    };

    ReferenceClassData.prototype.get_default_fields = function() {
      if (this.default_fields !== void 0) {
        return this.default_fields;
      }
      this.construct_default_fields();
      return this.default_fields;
    };

    ReferenceClassData.prototype._initialize_static_field = function(rs, name) {
      var cv, cva, f;

      f = this.fl_cache[name];
      if (f != null ? f.access_flags["static"] : void 0) {
        cva = f.get_attribute('ConstantValue');
        if (cva != null) {
          cv = f.type === 'Ljava/lang/String;' ? rs.init_string(cva.value) : cva.value;
        }
        this.static_fields[name] = cv != null ? cv : util.initial_value(f.raw_descriptor);
      } else {
        rs.java_throw(this.loader.get_initialized_class('Ljava/lang/NoSuchFieldError;'), name);
      }
    };

    ReferenceClassData.prototype.static_get = function(rs, name) {
      if (this.static_fields[name] !== void 0) {
        return this.static_fields[name];
      }
      this._initialize_static_field(rs, name);
      return this.static_get(rs, name);
    };

    ReferenceClassData.prototype.static_put = function(rs, name, val) {
      if (this.static_fields[name] !== void 0) {
        return this.static_fields[name] = val;
      } else {
        this._initialize_static_field(rs, name);
        return this.static_put(rs, name, val);
      }
    };

    ReferenceClassData.prototype.set_resolved = function(super_class_cdata, interface_cdatas) {
      this.super_class_cdata = super_class_cdata;
      trace("Class " + (this.get_type()) + " is now resolved.");
      this.interface_cdatas = interface_cdatas != null ? interface_cdatas : [];
      return this.resolved = true;
    };

    ReferenceClassData.prototype.construct_default_fields = function() {
      var cls, f, val, _i, _len, _ref1;

      cls = this;
      this.default_fields = Object.create(null);
      while (cls != null) {
        _ref1 = cls.fields;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          f = _ref1[_i];
          if (!(!f.access_flags["static"])) {
            continue;
          }
          val = util.initial_value(f.raw_descriptor);
          this.default_fields[cls.get_type() + f.name] = val;
        }
        cls = cls.get_super_class();
      }
    };

    ReferenceClassData.prototype.field_lookup = function(rs, name, null_handled) {
      var field;

      field = this.fl_cache[name];
      if (field != null) {
        return field;
      }
      field = this._field_lookup(rs, name);
      if ((field != null) || null_handled === true) {
        this.fl_cache[name] = field;
        return field;
      }
      return rs.java_throw(rs.get_bs_class('Ljava/lang/NoSuchFieldError;'), "No such field found in " + (util.ext_classname(this.get_type())) + "::" + name);
    };

    ReferenceClassData.prototype._field_lookup = function(rs, name) {
      var field, ifc_cls, sc, _i, _j, _len, _len1, _ref1, _ref2;

      _ref1 = this.fields;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        field = _ref1[_i];
        if (field.name === name) {
          return field;
        }
      }
      _ref2 = this.get_interfaces();
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        ifc_cls = _ref2[_j];
        field = ifc_cls.field_lookup(rs, name, true);
        if (field != null) {
          return field;
        }
      }
      sc = this.get_super_class();
      if (sc != null) {
        field = sc.field_lookup(rs, name, true);
        if (field != null) {
          return field;
        }
      }
      return null;
    };

    ReferenceClassData.prototype.method_lookup = function(rs, sig) {
      var eh, handlers, method, _i, _len, _ref1;

      if (this.ml_cache[sig] != null) {
        return this.ml_cache[sig];
      }
      method = this._method_lookup(rs, sig);
      if (method == null) {
        rs.java_throw(rs.get_bs_class('Ljava/lang/NoSuchMethodError;'), "No such method found in " + (util.ext_classname(this.get_type())) + "::" + sig);
      }
      if ((handlers = (_ref1 = method.code) != null ? _ref1.exception_handlers : void 0) != null) {
        for (_i = 0, _len = handlers.length; _i < _len; _i++) {
          eh = handlers[_i];
          if (!(eh.catch_type === '<any>' || ((this.loader.get_resolved_class(eh.catch_type, true)) != null))) {
            return null;
          }
        }
      }
      return method;
    };

    ReferenceClassData.prototype._method_lookup = function(rs, sig) {
      var ifc, parent, _i, _len, _ref1;

      if (sig in this.ml_cache) {
        return this.ml_cache[sig];
      }
      if (sig in this.methods) {
        return this.ml_cache[sig] = this.methods[sig];
      }
      parent = this.get_super_class();
      if (parent != null) {
        this.ml_cache[sig] = parent._method_lookup(rs, sig);
        if (this.ml_cache[sig] != null) {
          return this.ml_cache[sig];
        }
      }
      _ref1 = this.get_interfaces();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        ifc = _ref1[_i];
        this.ml_cache[sig] = ifc._method_lookup(rs, sig);
        if (this.ml_cache[sig] != null) {
          return this.ml_cache[sig];
        }
      }
      return this.ml_cache[sig] = null;
    };

    ReferenceClassData.prototype.resolve_method = function(rs, sig, success_fn, failure_fn) {
      var handlers, i, m, next_handler,
        _this = this;

      trace("ASYNCHRONOUS: resolve_method " + sig);
      m = this.method_lookup(rs, sig);
      handlers = m.code.exception_handlers;
      i = 0;
      next_handler = function() {
        var eh;

        if (i === handlers.length) {
          return success_fn(m);
        } else {
          eh = handlers[i++];
          if (!(eh.catch_type === '<any>' || _this.loader.get_resolved_class(eh.catch_type, true))) {
            return _this.loader.resolve_class(rs, eh.catch_type, next_handler, failure_fn);
          } else {
            return next_handler();
          }
        }
      };
      return next_handler();
    };

    ReferenceClassData.prototype.is_castable = function(target) {
      if (!(target instanceof root.ReferenceClassData)) {
        return false;
      }
      if (this.access_flags["interface"]) {
        if (target.access_flags["interface"]) {
          return this.is_subinterface(target);
        }
        if (!target.access_flags["interface"]) {
          return target.get_type() === 'Ljava/lang/Object;';
        }
      } else {
        if (target.access_flags["interface"]) {
          return this.is_subinterface(target);
        }
        return this.is_subclass(target);
      }
    };

    ReferenceClassData.prototype.is_subinterface = function(target) {
      var super_iface, _i, _len, _ref1;

      if (this.this_class === target.this_class) {
        return true;
      }
      _ref1 = this.get_interfaces();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        super_iface = _ref1[_i];
        if (super_iface.is_subinterface(target)) {
          return true;
        }
      }
      if (this.get_super_class() == null) {
        return false;
      }
      return this.get_super_class().is_subinterface(target);
    };

    return ReferenceClassData;

  })(ClassData);

}).call(this);
