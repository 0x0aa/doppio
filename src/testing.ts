// Generated by CoffeeScript 1.6.2
(function() {
  "use strict";
  var BootstrapClassLoader, ReferenceClassData, RuntimeState, cleandiff, cleandiff_fancy, disassemble, fs, jvm, path, root, run_disasm_test, run_stdout_test, sanitize, util, _ref, _ref1, _ref2,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  jvm = require('./jvm');

  RuntimeState = require('./runtime').RuntimeState;

  util = require('./util');

  disassemble = require('./disassembler').disassemble;

  ReferenceClassData = require('./ClassData').ReferenceClassData;

  fs = (_ref = typeof node !== "undefined" && node !== null ? node.fs : void 0) != null ? _ref : require('fs');

  path = (_ref1 = typeof node !== "undefined" && node !== null ? node.path : void 0) != null ? _ref1 : require('path');

  BootstrapClassLoader = require('./ClassLoader').BootstrapClassLoader;

  root = typeof exports !== "undefined" && exports !== null ? exports : (_ref2 = window.testing) != null ? _ref2 : window.testing = {};

  root.find_test_classes = function(doppio_dir) {
    var file, test_dir, _i, _len, _ref3, _results;

    test_dir = path.resolve(doppio_dir, 'classes/test');
    _ref3 = fs.readdirSync(test_dir);
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      file = _ref3[_i];
      if (path.extname(file) === '.java') {
        _results.push("classes/test/" + (path.basename(file, '.java')));
      }
    }
    return _results;
  };

  root.run_tests = function(test_classes, stdout, hide_diffs, quiet, keep_going, callback) {
    var doppio_dir, failname, jcl_dir, tc, xfails, _runner;

    doppio_dir = typeof node !== "undefined" && node !== null ? '/home/doppio/' : path.resolve(__dirname, '..');
    if ((test_classes != null ? test_classes.length : void 0) > 0) {
      test_classes = (function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = test_classes.length; _i < _len; _i++) {
          tc = test_classes[_i];
          _results.push(tc.replace(/\.class$/, ''));
        }
        return _results;
      })();
    } else {
      test_classes = root.find_test_classes(doppio_dir);
    }
    jcl_dir = path.resolve(doppio_dir, 'vendor/classes');
    jvm.set_classpath(jcl_dir, doppio_dir);
    xfails = (function() {
      var _i, _len, _ref3, _results;

      _ref3 = (fs.readFileSync('classes/test/xfail.txt', 'utf-8')).split('\n');
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        failname = _ref3[_i];
        _results.push("classes/test/" + failname);
      }
      return _results;
    })();
    _runner = function() {
      var disasm_diff, test;

      if (test_classes.length === 0) {
        quiet || keep_going || stdout("Pass\n");
        return callback(false);
      }
      test = test_classes.shift();
      quiet || stdout("testing " + test + "...\n");
      if ((disasm_diff = run_disasm_test(doppio_dir, test)) != null) {
        stdout("Failed disasm test " + test + "\n");
        hide_diffs || stdout("" + disasm_diff + "\n");
        if (!keep_going) {
          return callback(true);
        }
      }
      return run_stdout_test(doppio_dir, test, function(diff) {
        if ((diff != null) ^ (__indexOf.call(xfails, test) >= 0)) {
          if (diff != null) {
            stdout("Failed output test: " + test + "\n");
            hide_diffs || stdout("" + diff + "\n");
          } else {
            stdout("Expected failure passed: " + test + "\n");
          }
          if (!keep_going) {
            return callback(true);
          }
        }
        return _runner();
      });
    };
    return _runner();
  };

  sanitize = function(str) {
    return str.replace(/\/\/.*/g, '').replace(/^\s*$[\n\r]+/mg, '').replace(/(float|double)\t.*/g, '$1').replace(/[ \t\r]+/g, ' ').replace(/[ ]\n/g, '\n').replace(/\[ \]/g, '[]');
  };

  run_disasm_test = function(doppio_dir, test_class) {
    var bytes_array, doppio_disasm, javap_disasm, test_path;

    test_path = path.resolve(doppio_dir, test_class);
    javap_disasm = sanitize(fs.readFileSync("" + test_path + ".disasm", 'utf8'));
    bytes_array = util.bytestr_to_array(fs.readFileSync("" + test_path + ".class", 'binary'));
    doppio_disasm = sanitize(disassemble(new ReferenceClassData(bytes_array)));
    return cleandiff(doppio_disasm, javap_disasm);
  };

  run_stdout_test = function(doppio_dir, test_class, callback) {
    var doppio_output, java_output, rs, stdout;

    java_output = fs.readFileSync("" + (path.resolve(doppio_dir, test_class)) + ".runout", 'utf8');
    doppio_output = '';
    stdout = function(str) {
      return doppio_output += str;
    };
    rs = new RuntimeState(stdout, (function() {}), new BootstrapClassLoader(jvm.read_classfile));
    return jvm.run_class(rs, test_class, [], function() {
      return callback(cleandiff(doppio_output, java_output));
    });
  };

  cleandiff = function(our_str, their_str) {
    var diff, extra, oidx, our_lines, their_lines, tidx, _i, _j, _len, _len1, _ref3, _ref4, _ref5;

    our_lines = our_str.split(/\n/);
    their_lines = their_str.split(/\n/);
    _ref3 = [0, 0], oidx = _ref3[0], tidx = _ref3[1];
    diff = [];
    while (oidx < our_lines.length && tidx < their_lines.length) {
      if (our_lines[oidx++] === their_lines[tidx++]) {
        continue;
      }
      diff.push("D:" + our_lines[oidx - 1] + "\nJ:" + their_lines[tidx - 1]);
    }
    _ref4 = our_lines.slice(oidx);
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      extra = _ref4[_i];
      diff.push("D:" + extra);
    }
    _ref5 = their_lines.slice(tidx);
    for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {
      extra = _ref5[_j];
      diff.push("J:" + extra);
    }
    if (diff.length > 0) {
      return diff.join('\n');
    }
  };

  cleandiff_fancy = function(our_str, their_str) {
    var cfrm, d, dd, diff, dist, i, j, line, our_lines, their_lines, _i, _j, _k, _l, _ref3, _ref4, _ref5, _ref6;

    our_lines = our_str.split(/\n/);
    their_lines = their_str.split(/\n/);
    if (our_lines.length === 0) {
      return ((function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = their_lines.length; _i < _len; _i++) {
          line = their_lines[_i];
          _results.push("J:" + line);
        }
        return _results;
      })()).join('\n');
    }
    if (their_lines.length === 0) {
      return ((function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = our_lines.length; _i < _len; _i++) {
          line = our_lines[_i];
          _results.push("D:" + line);
        }
        return _results;
      })()).join('\n');
    }
    dist = [];
    cfrm = [];
    for (i = _i = 0, _ref3 = their_lines.length; _i <= _ref3; i = _i += 1) {
      dist.push((function() {
        var _j, _ref4, _results;

        _results = [];
        for (j = _j = 0, _ref4 = our_lines.length; _j <= _ref4; j = _j += 1) {
          _results.push(0);
        }
        return _results;
      })());
      cfrm.push((function() {
        var _j, _ref4, _results;

        _results = [];
        for (j = _j = 0, _ref4 = our_lines.length; _j <= _ref4; j = _j += 1) {
          _results.push(0);
        }
        return _results;
      })());
      dist[i][0] = i;
      cfrm[i][0] = 1;
    }
    for (j = _j = 0, _ref4 = our_lines.length; _j <= _ref4; j = _j += 1) {
      dist[0][j] = j;
      cfrm[0][j] = 2;
    }
    for (i = _k = 1, _ref5 = their_lines.length; _k <= _ref5; i = _k += 1) {
      for (j = _l = 1, _ref6 = our_lines.length; _l <= _ref6; j = _l += 1) {
        if (our_lines[j - 1] === their_lines[i - 1]) {
          dist[i][j] = dist[i - 1][j - 1];
          cfrm[i][j] = 4;
        } else {
          dd = [dist[i - 1][j], dist[i][j - 1], dist[i - 1][j - 1]];
          d = Math.min.apply(Math, dd);
          dist[i][j] = d + 1;
          cfrm[i][j] = dd.indexOf(d) + 1;
        }
      }
    }
    i = their_lines.length;
    j = our_lines.length;
    if (dist[i][j] === 0) {
      return;
    }
    diff = [];
    while (!(i === 0 && j === 0)) {
      switch (cfrm[i][j]) {
        case 1:
          diff.unshift("doppio{" + j + "}:" + our_lines[j] + "\njava  {" + i + "}:" + their_lines[i--]);
          break;
        case 2:
          diff.unshift("doppio{" + j + "}:" + our_lines[j--] + "\njava  {" + i + "}:" + their_lines[i]);
          break;
        case 3:
          diff.unshift("doppio{" + j + "}:" + our_lines[j--] + "\njava  {" + i + "}:" + their_lines[i--]);
          break;
        case 4:
          i--;
          j--;
      }
    }
    return diff.join('\n');
  };

}).call(this);
