// Generated by CoffeeScript 1.6.2
(function() {
  "use strict";
  var ArrayClassData, ClassLoader, JavaException, JavaObject, PrimitiveClassData, ReferenceClassData, StackFrame, root, trace, util, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('./ClassData'), ReferenceClassData = _ref.ReferenceClassData, PrimitiveClassData = _ref.PrimitiveClassData, ArrayClassData = _ref.ArrayClassData;

  util = require('./util');

  trace = require('./logging').trace;

  StackFrame = require('./runtime').StackFrame;

  JavaException = require('./exceptions').JavaException;

  JavaObject = require('./java_object').JavaObject;

  root = typeof exports !== "undefined" && exports !== null ? exports : this.ClassLoader = {};

  ClassLoader = (function() {
    function ClassLoader(bootstrap) {
      this.bootstrap = bootstrap;
      this.loaded_classes = Object.create(null);
    }

    ClassLoader.prototype.get_package_names = function() {
      var classes, cls, pkg_names, _i, _len;

      classes = this.get_loaded_class_list(true);
      pkg_names = {};
      for (_i = 0, _len = classes.length; _i < _len; _i++) {
        cls = classes[_i];
        pkg_names[cls.substring(0, (cls.lastIndexOf('/')) + 1)] = true;
      }
      return Object.keys(pkg_names);
    };

    ClassLoader.prototype.get_loaded_class_list = function(ref_class_only) {
      var cdata, k, _ref1, _results;

      if (ref_class_only == null) {
        ref_class_only = false;
      }
      if (ref_class_only) {
        _ref1 = this.loaded_classes;
        _results = [];
        for (k in _ref1) {
          cdata = _ref1[k];
          if (cdata.major_version != null) {
            _results.push(k.slice(1, -1));
          }
        }
        return _results;
      } else {
        return Object.keys(this.loaded_classes);
      }
    };

    ClassLoader.prototype.remove_class = function(type_str) {
      var cdata, k, _ref1;

      this._rem_class(type_str);
      if (util.is_primitive_type(type_str)) {
        return;
      }
      _ref1 = this.loaded_classes;
      for (k in _ref1) {
        cdata = _ref1[k];
        if (type_str === (typeof cdata.get_component_type === "function" ? cdata.get_component_type() : void 0) || type_str === cdata.get_super_class_type()) {
          this.remove_class(k);
        }
      }
    };

    ClassLoader.prototype._rem_class = function(type_str) {
      delete this.loaded_classes[type_str];
    };

    ClassLoader.prototype._add_class = function(type_str, cdata) {
      this.loaded_classes[type_str] = cdata;
    };

    ClassLoader.prototype._get_class = function(type_str) {
      var cdata;

      cdata = this.loaded_classes[type_str];
      if ((cdata != null ? cdata.reset_bit : void 0) === 1) {
        cdata.reset();
      }
      if (cdata != null) {
        return cdata;
      } else {
        return null;
      }
    };

    ClassLoader.prototype._try_define_array_class = function(type_str) {
      var component_cdata, component_type;

      component_type = util.get_component_type(type_str);
      component_cdata = this.get_resolved_class(component_type, true);
      if (component_cdata == null) {
        return null;
      }
      return this._define_array_class(type_str, component_cdata);
    };

    ClassLoader.prototype._define_array_class = function(type_str, component_cdata) {
      var cdata;

      if (component_cdata.get_class_loader() !== this) {
        return component_cdata.get_class_loader()._define_array_class(type_str, component_cdata);
      } else {
        cdata = new ArrayClassData(component_cdata.get_type(), this);
        this._add_class(type_str, cdata);
        cdata.set_resolved(this.bootstrap.get_resolved_class('Ljava/lang/Object;'), component_cdata);
        return cdata;
      }
    };

    ClassLoader.prototype._parallel_class_resolve = function(rs, types, success_fn, failure_fn, explicit) {
      var failure, fetch_data, pending_requests, request_finished, resolved, type, _i, _len, _results,
        _this = this;

      if (explicit == null) {
        explicit = false;
      }
      pending_requests = types.length;
      failure = null;
      resolved = [];
      request_finished = function() {
        pending_requests--;
        if (pending_requests === 0) {
          if (failure == null) {
            return success_fn(resolved);
          } else {
            return failure_fn(failure);
          }
        }
      };
      fetch_data = function(type) {
        return _this.resolve_class(rs, type, (function(cdata) {
          resolved.push(cdata);
          return request_finished();
        }), (function(f_fn) {
          failure = f_fn;
          return request_finished();
        }), explicit);
      };
      _results = [];
      for (_i = 0, _len = types.length; _i < _len; _i++) {
        type = types[_i];
        _results.push(fetch_data(type));
      }
      return _results;
    };

    ClassLoader.prototype._regular_class_resolve = function(rs, types, success_fn, failure_fn, explicit) {
      var fetch_class, resolved,
        _this = this;

      if (explicit == null) {
        explicit = false;
      }
      if (!(types.length > 0)) {
        return success_fn();
      }
      resolved = [];
      fetch_class = function(type) {
        return _this.resolve_class(rs, type, (function(cdata) {
          resolved.push(cdata);
          if (types.length > 0) {
            return fetch_class(types.shift());
          } else {
            return success_fn(resolved);
          }
        }), failure_fn, explicit);
      };
      return fetch_class(types.shift());
    };

    ClassLoader.prototype.define_class = function(rs, type_str, data, success_fn, failure_fn, parallel, explicit) {
      var cdata, clsdata, msg, process_resolved_classes, resolved_already, to_resolve, type, types, _i, _len,
        _this = this;

      if (parallel == null) {
        parallel = false;
      }
      if (explicit == null) {
        explicit = false;
      }
      trace("Defining class " + type_str + "...");
      cdata = new ReferenceClassData(data, this);
      if ((type = cdata.get_type()) !== type_str) {
        msg = "" + (util.descriptor2typestr(type_str)) + " (wrong name: " + (util.descriptor2typestr(type)) + ")";
        return failure_fn((function() {
          return rs.java_throw(_this.get_initialized_class('Ljava/lang/NoClassDefFoundError;'), msg);
        }));
      }
      this._add_class(type_str, cdata);
      types = cdata.get_interface_types();
      types.push(cdata.get_super_class_type());
      to_resolve = [];
      resolved_already = [];
      for (_i = 0, _len = types.length; _i < _len; _i++) {
        type = types[_i];
        if (type == null) {
          continue;
        }
        clsdata = this.get_resolved_class(type, true);
        if (clsdata != null) {
          resolved_already.push(clsdata);
        } else {
          to_resolve.push(type);
        }
      }
      process_resolved_classes = function(cdatas) {
        var a_cdata, interface_cdatas, super_cdata, super_type, _j, _len1;

        cdatas = resolved_already.concat(cdatas);
        super_cdata = null;
        interface_cdatas = [];
        super_type = cdata.get_super_class_type();
        for (_j = 0, _len1 = cdatas.length; _j < _len1; _j++) {
          a_cdata = cdatas[_j];
          type = a_cdata.get_type();
          if (type === super_type) {
            super_cdata = a_cdata;
          } else {
            interface_cdatas.push(a_cdata);
          }
        }
        cdata.set_resolved(super_cdata, interface_cdatas);
        return success_fn(cdata);
      };
      if (to_resolve.length > 0) {
        if (false) {
          return this._parallel_class_resolve(rs, to_resolve, process_resolved_classes, failure_fn, explicit);
        } else {
          return this._regular_class_resolve(rs, to_resolve, process_resolved_classes, failure_fn, explicit);
        }
      } else {
        return process_resolved_classes([]);
      }
    };

    ClassLoader.prototype.get_loaded_class = function(type_str, null_handled) {
      var cdata;

      if (null_handled == null) {
        null_handled = false;
      }
      cdata = this._get_class(type_str);
      if (cdata != null) {
        return cdata;
      }
      if (util.is_array_type(type_str)) {
        cdata = this._try_define_array_class(type_str);
        if (cdata != null) {
          return cdata;
        }
      }
      if (util.is_primitive_type(type_str)) {
        return this.bootstrap.get_primitive_class(type_str);
      }
      if (null_handled) {
        return null;
      }
      throw new Error("Error in get_loaded_class: Class " + type_str + " is not loaded.");
    };

    ClassLoader.prototype.get_resolved_class = function(type_str, null_handled) {
      var cdata;

      if (null_handled == null) {
        null_handled = false;
      }
      cdata = this.get_loaded_class(type_str, null_handled);
      if (cdata != null ? cdata.is_resolved() : void 0) {
        return cdata;
      }
      if (null_handled) {
        return null;
      }
      throw new Error("Error in get_resolved_class: Class " + type_str + " is not resolved.");
    };

    ClassLoader.prototype.get_initialized_class = function(type_str, null_handled) {
      var cdata;

      if (null_handled == null) {
        null_handled = false;
      }
      cdata = this.get_resolved_class(type_str, null_handled);
      if (cdata != null ? cdata.is_initialized() : void 0) {
        return cdata;
      }
      if (null_handled) {
        return null;
      }
      throw new Error("Error in get_initialized_class: Class " + type_str + " is not initialized.");
    };

    ClassLoader.prototype._initialize_class = function(rs, cdata, success_fn, failure_fn) {
      var class_file, clinit, first_clinit, first_native_frame, next_nf,
        _this = this;

      trace("Actually initializing class " + (cdata.get_type()) + "...");
      if (!(cdata instanceof ReferenceClassData)) {
        (typeof UNSAFE !== "undefined" && UNSAFE !== null) || (function() {
          throw new Error("Tried to initialize a non-reference type: " + (cdata.get_type()));
        })();
      }
      first_clinit = true;
      first_native_frame = StackFrame.native_frame("$clinit", (function() {
        if (rs.curr_frame() !== first_native_frame) {
          throw new Error("The top of the meta stack should be this native frame, but it is not: " + (rs.curr_frame().name) + " at " + (rs.meta_stack().length()));
        }
        rs.meta_stack().pop();
        return rs.async_op(function() {
          return success_fn(cdata);
        });
      }), (function(e) {
        var cls, nf, v;

        rs.curr_frame().cdata.reset();
        if (e instanceof JavaException) {
          if (e.exception.cls.get_type() === 'Ljava/lang/NoClassDefFoundError;') {
            rs.meta_stack().pop();
            throw e;
          }
          nf = rs.curr_frame();
          nf.runner = function() {
            var rv;

            rv = rs.pop();
            rs.meta_stack().pop();
            throw new JavaException(rv);
          };
          nf.error = function() {
            rs.meta_stack().pop();
            return failure_fn((function() {
              throw e;
            }));
          };
          cls = _this.bootstrap.get_resolved_class('Ljava/lang/ExceptionInInitializerError;');
          v = new JavaObject(rs, cls);
          rs.push_array([v, v, e.exception]);
          return cls.method_lookup(rs, '<init>(Ljava/lang/Throwable;)V').setup_stack(rs);
        } else {
          rs.meta_stack().pop();
          throw e;
        }
      }));
      first_native_frame.cdata = cdata;
      class_file = cdata;
      while ((class_file != null) && !class_file.is_initialized()) {
        trace("initializing class: " + (class_file.get_type()));
        class_file.initialized = true;
        clinit = class_file.get_method('<clinit>()V');
        if (clinit != null) {
          trace("\tFound <clinit>. Pushing stack frame.");
          if (first_clinit) {
            trace("\tFirst <clinit> in the loop.");
            first_clinit = false;
            rs.meta_stack().push(first_native_frame);
          } else {
            next_nf = StackFrame.native_frame("$clinit_secondary", (function() {
              return rs.meta_stack().pop();
            }), (function(e) {
              rs.curr_frame().cdata.reset();
              rs.meta_stack().pop();
              while (!rs.curr_frame()["native"]) {
                rs.meta_stack().pop();
              }
              return rs.async_op((function() {
                return failure_fn((function() {
                  throw e;
                }), true);
              }));
            }));
            next_nf.cdata = class_file;
            rs.meta_stack().push(next_nf);
          }
          clinit.setup_stack(rs);
        }
        class_file = class_file.get_super_class();
      }
      if (!first_clinit) {
        rs.run_until_finished((function() {}), false, rs.stashed_done_cb);
        return;
      }
      success_fn(cdata);
    };

    ClassLoader.prototype.initialize_class = function(rs, type_str, success_fn, failure_fn, explicit) {
      var cdata, component_type,
        _this = this;

      if (explicit == null) {
        explicit = false;
      }
      trace("Initializing class " + type_str + "...");
      cdata = this.get_initialized_class(type_str, true);
      if (cdata != null) {
        return success_fn(cdata);
      }
      if (util.is_array_type(type_str)) {
        component_type = util.get_component_type(type_str);
        this.resolve_class(rs, component_type, (function(cdata) {
          return success_fn(_this._define_array_class(type_str, cdata));
        }), failure_fn, explicit);
        return;
      }
      cdata = this.get_resolved_class(type_str, true);
      if (cdata != null) {
        return this._initialize_class(rs, cdata, success_fn, failure_fn);
      }
      return this.resolve_class(rs, type_str, (function(cdata) {
        if (cdata.is_initialized(rs)) {
          return success_fn(cdata);
        } else {
          return _this._initialize_class(rs, cdata, success_fn, failure_fn);
        }
      }), failure_fn, explicit);
    };

    ClassLoader.prototype.resolve_class = function(rs, type_str, success_fn, failure_fn, explicit) {
      var component_type, rv,
        _this = this;

      if (explicit == null) {
        explicit = false;
      }
      trace("Resolving class " + type_str + "... [general]");
      rv = this.get_resolved_class(type_str, true);
      if (rv != null) {
        return success_fn(rv);
      }
      if (util.is_array_type(type_str)) {
        component_type = util.get_component_type(type_str);
        this.resolve_class(rs, component_type, (function(cdata) {
          return success_fn(_this._define_array_class(type_str, cdata));
        }), failure_fn, explicit);
        return;
      }
      return this._resolve_class(rs, type_str, success_fn, failure_fn, explicit);
    };

    return ClassLoader;

  })();

  root.BootstrapClassLoader = (function(_super) {
    __extends(BootstrapClassLoader, _super);

    function BootstrapClassLoader(read_classfile) {
      this.read_classfile = read_classfile;
      this._resolve_class = __bind(this._resolve_class, this);
      BootstrapClassLoader.__super__.constructor.call(this, this);
    }

    BootstrapClassLoader.prototype.serialize = function(visited) {
      var cls, loaded, type, _ref1;

      if ('bootstrapLoader' in visited) {
        return '<*bootstrapLoader>';
      }
      visited['bootstrapLoader'] = true;
      loaded = {};
      _ref1 = this.loaded_classes;
      for (type in _ref1) {
        cls = _ref1[type];
        if (type !== "__proto__") {
          loaded["" + type + "(" + (cls.getLoadState()) + ")"] = cls.loader.serialize(visited);
        }
      }
      return {
        ref: 'bootstrapLoader',
        loaded: loaded
      };
    };

    BootstrapClassLoader.prototype.reset = function() {
      var cls, cname, _ref1;

      _ref1 = this.loaded_classes;
      for (cname in _ref1) {
        cls = _ref1[cname];
        if (cname !== "__proto__") {
          cls.reset_bit = 1;
        }
      }
    };

    BootstrapClassLoader.prototype.get_primitive_class = function(type_str) {
      var cdata;

      cdata = this._get_class(type_str);
      if (cdata != null) {
        return cdata;
      }
      cdata = new PrimitiveClassData(type_str, this);
      this._add_class(type_str, cdata);
      return cdata;
    };

    BootstrapClassLoader.prototype._resolve_class = function(rs, type_str, success_fn, failure_fn, explicit) {
      var rv,
        _this = this;

      if (explicit == null) {
        explicit = false;
      }
      trace("ASYNCHRONOUS: resolve_class " + type_str + " [bootstrap]");
      rv = this.get_resolved_class(type_str, true);
      if (rv != null) {
        return success_fn(rv);
      }
      this.read_classfile(type_str, (function(data) {
        return _this.define_class(rs, type_str, data, success_fn, failure_fn, true, explicit);
      }), (function() {
        return failure_fn(function() {
          var cls, msg, v;

          rs.meta_stack().push(StackFrame.native_frame('$class_not_found', (function() {
            var cls, v;

            rs.curr_frame().runner = function() {
              rv = rs.pop();
              rs.meta_stack().pop();
              throw new JavaException(rv);
            };
            if (!explicit) {
              rv = rs.pop();
              cls = _this.bootstrap.get_initialized_class('Ljava/lang/NoClassDefFoundError;');
              v = new JavaObject(rs, cls);
              rs.push_array([v, v, rv]);
              return cls.method_lookup(rs, '<init>(Ljava/lang/Throwable;)V').setup_stack(rs);
            }
          }), (function() {
            rs.meta_stack().pop();
            return failure_fn((function() {
              throw e;
            }));
          })));
          cls = _this.bootstrap.get_initialized_class('Ljava/lang/ClassNotFoundException;');
          v = new JavaObject(rs, cls);
          msg = rs.init_string(util.ext_classname(type_str));
          rs.push_array([v, v, msg]);
          return cls.method_lookup(rs, '<init>(Ljava/lang/String;)V').setup_stack(rs);
        });
      }));
    };

    return BootstrapClassLoader;

  })(ClassLoader);

  root.CustomClassLoader = (function(_super) {
    __extends(CustomClassLoader, _super);

    function CustomClassLoader(bootstrap, loader_obj) {
      this.loader_obj = loader_obj;
      CustomClassLoader.__super__.constructor.call(this, bootstrap);
    }

    CustomClassLoader.prototype.serialize = function(visited) {
      return this.loader_obj.serialize(visited);
    };

    CustomClassLoader.prototype._resolve_class = function(rs, type_str, success_fn, failure_fn, explicit) {
      var _this = this;

      if (explicit == null) {
        explicit = false;
      }
      trace("ASYNCHRONOUS: resolve_class " + type_str + " [custom]");
      rs.meta_stack().push(StackFrame.native_frame("$" + (this.loader_obj.cls.get_type()), (function() {
        var cls, jclo;

        jclo = rs.pop();
        rs.meta_stack().pop();
        cls = jclo.$cls;
        if (_this.get_resolved_class(type_str, true) == null) {
          _this._add_class(type_str, cls);
        }
        return rs.async_op(function() {
          return success_fn(cls);
        });
      }), (function(e) {
        rs.meta_stack().pop();
        return rs.async_op(function() {
          return failure_fn(function() {
            throw e;
          });
        });
      })));
      rs.push2(this.loader_obj, rs.init_string(util.ext_classname(type_str)));
      this.loader_obj.cls.method_lookup(rs, 'loadClass(Ljava/lang/String;)Ljava/lang/Class;').setup_stack(rs);
      rs.run_until_finished((function() {}), false, rs.stashed_done_cb);
    };

    return CustomClassLoader;

  })(ClassLoader);

}).call(this);
